# Program to calculate lacunarity in images

########## ----------- ############

#Taking as input data the pixel matrix in "txt format", 
#this code calculates the lacunarity curve and the 
#lacunarity exponent through the "Gliding Box" algorithm. 
#The pixel matrix can come from any type of digital image 
#or microscopy. The "L" parameter is the dimension of the 
#matrix and must be indicated by an integer. 
#The "threshold" parameter depends on the characteristics 
#of the data and can be obtained externally using some 
#automated method such as the OTSU algorithm or 
#Artificial Intelligence, however, we suggest as default 
#the average of the pixel matrix data. 
#The "m" parameter represents the values of the box size, 
#which can be a sequence of integers "m = 1,2,4,8,16,32,64,128". 
#This sequence can be changed and extended to receive other values 
#as long as the "lacunarity" function is adjusted for this.
#A test matrix (surf.txt) for evaluating the code is also provided.

######### ------------ ############

# Input data (pixels matrix)

image1 = read.table (file = "surf.txt")

mat = as.matrix(image1) # Recognizes input as array

L = 144 # Matrix dimension

# Indicate the threshold

threshold =  mean(mat)

# Binarize the matrix

mat_binar = ifelse (mat >= threshold, "1","0")

# Indicate the box size

m = c(1,2,4,8,16,32,64,128)

# Lacunarity Function

lacunarity<-function(m){
  vnum0 = c(NULL)
  
  for (n in c(1:((L+1)-m))) {
    
    if (m==1){
    i<-c(1+(n-1))
    }
    
    if (m==2){
      i<-c(1+(n-1),2+(n-1))
    }
    
    if (m==4){
      i<-c(1+(n-1),2+(n-1),3+(n-1),4+(n-1))
    }
    
    if (m==8){
      i<-c(1+(n-1),2+(n-1),3+(n-1),4+(n-1),5+(n-1),6+(n-1),7+(n-1),8+(n-1))
    }
    
    if (m==16){
      i<-c(1+(n-1),2+(n-1),3+(n-1),4+(n-1),5+(n-1),6+(n-1),7+(n-1),8+(n-1),9+(n-1),10+(n-1),11+(n-1),12+(n-1),13+(n-1),14+(n-1),15+(n-1),16+(n-1))
    }
    
    if (m==32){
      i<-c(1+(n-1),2+(n-1),3+(n-1),4+(n-1),5+(n-1),6+(n-1),7+(n-1),8+(n-1),9+(n-1),10+(n-1),11+(n-1),12+(n-1),13+(n-1),14+(n-1),15+(n-1),16+(n-1),17+(n-1),18+(n-1),19+(n-1),20+(n-1),21+(n-1),22+(n-1),23+(n-1),24+(n-1),25+(n-1),26+(n-1),27+(n-1),28+(n-1),29+(n-1),30+(n-1),31+(n-1),32+(n-1))
    }
    
    if (m==64){
      i<-c(1+(n-1),2+(n-1),3+(n-1),4+(n-1),5+(n-1),6+(n-1),7+(n-1),8+(n-1),9+(n-1),10+(n-1),11+(n-1),12+(n-1),13+(n-1),14+(n-1),15+(n-1),16+(n-1),17+(n-1),18+(n-1),19+(n-1),20+(n-1),21+(n-1),22+(n-1),23+(n-1),24+(n-1),25+(n-1),26+(n-1),27+(n-1),28+(n-1),29+(n-1),30+(n-1),31+(n-1),32+(n-1),33+(n-1),34+(n-1),35+(n-1),36+(n-1),37+(n-1),38+(n-1),39+(n-1),40+(n-1),41+(n-1),42+(n-1),43+(n-1),44+(n-1),45+(n-1),46+(n-1),47+(n-1),48+(n-1),49+(n-1),50+(n-1),51+(n-1),52+(n-1),53+(n-1),54+(n-1),55+(n-1),56+(n-1),57+(n-1),58+(n-1),59+(n-1),60+(n-1),61+(n-1),62+(n-1),63+(n-1),64+(n-1))
    }
    
    if (m==128){
      i<-c(1+(n-1),2+(n-1),3+(n-1),4+(n-1),5+(n-1),6+(n-1),7+(n-1),8+(n-1),9+(n-1),10+(n-1),11+(n-1),12+(n-1),13+(n-1),14+(n-1),15+(n-1),16+(n-1),17+(n-1),18+(n-1),19+(n-1),20+(n-1),21+(n-1),22+(n-1),23+(n-1),24+(n-1),25+(n-1),26+(n-1),27+(n-1),28+(n-1),29+(n-1),30+(n-1),31+(n-1),32+(n-1),33+(n-1),34+(n-1),35+(n-1),36+(n-1),37+(n-1),38+(n-1),39+(n-1),40+(n-1),41+(n-1),42+(n-1),43+(n-1),44+(n-1),45+(n-1),46+(n-1),47+(n-1),48+(n-1),49+(n-1),50+(n-1),51+(n-1),52+(n-1),53+(n-1),54+(n-1),55+(n-1),56+(n-1),57+(n-1),58+(n-1),59+(n-1),60+(n-1),61+(n-1),62+(n-1),63+(n-1),64+(n-1),65+(n-1),66+(n-1),67+(n-1),68+(n-1),69+(n-1),70+(n-1),71+(n-1),72+(n-1),73+(n-1),74+(n-1),75+(n-1),76+(n-1),77+(n-1),78+(n-1),79+(n-1),80+(n-1),81+(n-1),82+(n-1),83+(n-1),84+(n-1),85+(n-1),86+(n-1),87+(n-1),88+(n-1),89+(n-1),90+(n-1),91+(n-1),92+(n-1),93+(n-1),94+(n-1),95+(n-1),96+(n-1),97+(n-1),98+(n-1),99+(n-1),100+(n-1),101+(n-1),102+(n-1),103+(n-1),104+(n-1),105+(n-1),106+(n-1),107+(n-1),108+(n-1),109+(n-1),110+(n-1),111+(n-1),112+(n-1),113+(n-1),114+(n-1),115+(n-1),116+(n-1),117+(n-1),118+(n-1),119+(n-1),120+(n-1),121+(n-1),122+(n-1),123+(n-1),124+(n-1),125+(n-1),126+(n-1),127+(n-1),128+(n-1))
    }
    
    if (m==256){
      i<-c(1+(n-1),2+(n-1),3+(n-1),4+(n-1),5+(n-1),6+(n-1),7+(n-1),8+(n-1),9+(n-1),10+(n-1),11+(n-1),12+(n-1),13+(n-1),14+(n-1),15+(n-1),16+(n-1),17+(n-1),18+(n-1),19+(n-1),20+(n-1),21+(n-1),22+(n-1),23+(n-1),24+(n-1),25+(n-1),26+(n-1),27+(n-1),28+(n-1),29+(n-1),30+(n-1),31+(n-1),32+(n-1),33+(n-1),34+(n-1),35+(n-1),36+(n-1),37+(n-1),38+(n-1),39+(n-1),40+(n-1),41+(n-1),42+(n-1),43+(n-1),44+(n-1),45+(n-1),46+(n-1),47+(n-1),48+(n-1),49+(n-1),50+(n-1),51+(n-1),52+(n-1),53+(n-1),54+(n-1),55+(n-1),56+(n-1),57+(n-1),58+(n-1),59+(n-1),60+(n-1),61+(n-1),62+(n-1),63+(n-1),64+(n-1),65+(n-1),66+(n-1),67+(n-1),68+(n-1),69+(n-1),70+(n-1),71+(n-1),72+(n-1),73+(n-1),74+(n-1),75+(n-1),76+(n-1),77+(n-1),78+(n-1),79+(n-1),80+(n-1),81+(n-1),82+(n-1),83+(n-1),84+(n-1),85+(n-1),86+(n-1),87+(n-1),88+(n-1),89+(n-1),90+(n-1),91+(n-1),92+(n-1),93+(n-1),94+(n-1),95+(n-1),96+(n-1),97+(n-1),98+(n-1),99+(n-1),100+(n-1),101+(n-1),102+(n-1),103+(n-1),104+(n-1),105+(n-1),106+(n-1),107+(n-1),108+(n-1),109+(n-1),110+(n-1),111+(n-1),112+(n-1),113+(n-1),114+(n-1),115+(n-1),116+(n-1),117+(n-1),118+(n-1),119+(n-1),120+(n-1),121+(n-1),122+(n-1),123+(n-1),124+(n-1),125+(n-1),126+(n-1),127+(n-1),128+(n-1),129+(n-1),130+(n-1),131+(n-1),132+(n-1),133+(n-1),134+(n-1),135+(n-1),136+(n-1),137+(n-1),138+(n-1),139+(n-1),140+(n-1),141+(n-1),142+(n-1),143+(n-1),144+(n-1),145+(n-1),146+(n-1),147+(n-1),148+(n-1),149+(n-1),150+(n-1),151+(n-1),152+(n-1),153+(n-1),154+(n-1),155+(n-1),156+(n-1),157+(n-1),158+(n-1),159+(n-1),160+(n-1),161+(n-1),162+(n-1),163+(n-1),164+(n-1),165+(n-1),166+(n-1),167+(n-1),168+(n-1),169+(n-1),170+(n-1),171+(n-1),172+(n-1),173+(n-1),174+(n-1),175+(n-1),176+(n-1),177+(n-1),178+(n-1),179+(n-1),180+(n-1),181+(n-1),182+(n-1),183+(n-1),184+(n-1),185+(n-1),186+(n-1),187+(n-1),188+(n-1),189+(n-1),190+(n-1),191+(n-1),192+(n-1),193+(n-1),194+(n-1),195+(n-1),196+(n-1),197+(n-1),198+(n-1),199+(n-1),200+(n-1),
           201+(n-1),202+(n-1),203+(n-1),204+(n-1),205+(n-1),206+(n-1),207+(n-1),208+(n-1),209+(n-1),210+(n-1),211+(n-1),212+(n-1),213+(n-1),214+(n-1),215+(n-1),216+(n-1),217+(n-1),218+(n-1),219+(n-1),220+(n-1),221+(n-1),222+(n-1),223+(n-1),224+(n-1),225+(n-1),226+(n-1),227+(n-1),228+(n-1),229+(n-1),230+(n-1),231+(n-1),232+(n-1),233+(n-1),234+(n-1),235+(n-1),236+(n-1),237+(n-1),238+(n-1),239+(n-1),240+(n-1),241+(n-1),242+(n-1),243+(n-1),244+(n-1),245+(n-1),246+(n-1),247+(n-1),248+(n-1),249+(n-1),250+(n-1),251+(n-1),252+(n-1),253+(n-1),254+(n-1),255+(n-1),256+(n-1))
    }
    
    
    for (k in c(2:((L+2)-m))){
      
      if (m==1){
      j<-c(k-1)
      }
      
      if (m==2){
      j<-c(k-1,k)
      }
      
      if (m==4){
        j<-c(k-1,k,k+1,k+2)
      }
      
      if (m==8){
        j<-c(k-1,k,k+1,k+2,k+3,k+4,k+5,k+6)
      }
      
      if (m==16){
        j<-c(k-1,k,k+1,k+2,k+3,k+4,k+5,k+6,k+7,k+8,k+9,k+10,k+11,k+12,k+13,k+14)
      }
      
      if (m==32){
        j<-c(k-1,k,k+1,k+2,k+3,k+4,k+5,k+6,k+7,k+8,k+9,k+10,k+11,k+12,k+13,k+14,k+15,k+16,k+17,k+18,k+19,k+20,k+21,k+22,k+23,k+24,k+25,k+26,k+27,k+28,k+29,k+30)
      }
      
      if (m==64){
        j<-c(k-1,k,k+1,k+2,k+3,k+4,k+5,k+6,k+7,k+8,k+9,k+10,k+11,k+12,k+13,k+14,k+15,k+16,k+17,k+18,k+19,k+20,k+21,k+22,k+23,k+24,k+25,k+26,k+27,k+28,k+29,k+30,k+31,k+32,k+33,k+34,k+35,k+36,k+37,k+38,k+39,k+40,k+41,k+42,k+43,k+44,k+45,k+46,k+47,k+48,k+49,k+50,k+51,k+52,k+53,k+54,k+55,k+56,k+57,k+58,k+59,k+60,k+61,k+62)
      }
      
      if (m==128){
        j<-c(k-1,k,k+1,k+2,k+3,k+4,k+5,k+6,k+7,k+8,k+9,k+10,k+11,k+12,k+13,k+14,k+15,k+16,k+17,k+18,k+19,k+20,k+21,k+22,k+23,k+24,k+25,k+26,k+27,k+28,k+29,k+30,k+31,k+32,k+33,k+34,k+35,k+36,k+37,k+38,k+39,k+40,k+41,k+42,k+43,k+44,k+45,k+46,k+47,k+48,k+49,k+50,k+51,k+52,k+53,k+54,k+55,k+56,k+57,k+58,k+59,k+60,k+61,k+62,k+63,k+64,k+65,k+66,k+67,k+68,k+69,k+70,k+71,k+72,k+73,k+74,k+75,k+76,k+77,k+78,k+79,k+80,k+81,k+82,k+83,k+84,k+85,k+86,k+87,k+88,k+89,k+90,k+91,k+92,k+93,k+94,k+95,k+96,k+97,k+98,k+99,k+100,k+101,k+102,k+103,k+104,k+105,k+106,k+107,k+108,k+109,k+110,k+111,k+112,k+113,k+114,k+115,k+116,k+117,k+118,k+119,k+120,k+121,k+122,k+123,k+124,k+125,k+126)
      }
      
      if (m==256){
        j<-c(k-1,k,k+1,k+2,k+3,k+4,k+5,k+6,k+7,k+8,k+9,k+10,k+11,k+12,k+13,k+14,k+15,k+16,k+17,k+18,k+19,k+20,k+21,k+22,k+23,k+24,k+25,k+26,k+27,k+28,k+29,k+30,k+31,k+32,k+33,k+34,k+35,k+36,k+37,k+38,k+39,k+40,k+41,k+42,k+43,k+44,k+45,k+46,k+47,k+48,k+49,k+50,k+51,k+52,k+53,k+54,k+55,k+56,k+57,k+58,k+59,k+60,k+61,k+62,k+63,k+64,k+65,k+66,k+67,k+68,k+69,k+70,k+71,k+72,k+73,k+74,k+75,k+76,k+77,k+78,k+79,k+80,k+81,k+82,k+83,k+84,k+85,k+86,k+87,k+88,k+89,k+90,k+91,k+92,k+93,k+94,k+95,k+96,k+97,k+98,k+99,k+100,k+101,k+102,k+103,k+104,k+105,k+106,k+107,k+108,k+109,k+110,k+111,k+112,k+113,k+114,k+115,k+116,k+117,k+118,k+119,k+120,k+121,k+122,k+123,k+124,k+125,k+126,k+127,k+128,k+129,k+130,k+131,k+132,k+133,k+134,k+135,k+136,k+137,k+138,k+139,k+140,k+141,k+142,k+143,k+144,k+145,k+146,k+147,k+148,k+149,k+150,k+151,k+152,k+153,k+154,k+155,k+156,k+157,k+158,k+159,k+160,k+161,k+162,k+163,k+164,k+165,k+166,k+167,k+168,k+169,k+170,k+171,k+172,k+173,k+174,k+175,k+176,k+177,k+178,k+179,k+180,k+181,k+182,k+183,k+184,k+185,k+186,k+187,k+188,k+189,k+190,k+191,k+192,k+193,k+194,k+195,k+196,k+197,k+198,k+199,
             k+200,k+201,k+202,k+203,k+204,k+205,k+206,k+207,k+208,k+209,k+210,k+211,k+212,k+213,k+214,k+215,k+216,k+217,k+218,k+219,k+220,k+221,k+222,k+223,k+224,k+225,k+226,k+227,k+228,k+229,k+230,k+231,k+232,k+233,k+234,k+235,k+236,k+237,k+238,k+239,k+240,k+241,k+242,k+243,k+244,k+245,k+246,k+247,k+248,k+249,k+250,k+251,k+252,k+253,k+254)
      }
      
      M<-matrix(mat_binar[i,j],nrow=m, ncol=m)
      soma<-sum(M==0)
      vnum0 = c(vnum0,soma)
    
  }}

# Count the number of boxes with s (s=0,1,2,3,4,...,mxm) lacunar pixels

ns<-table(vnum0)

# Calculate the probability of these boxes being occupied

Pns<-ns/(L-m+1)^(2)

# Calculate the first and second moments of the ns values

s<-unique(sort(vnum0))

M1<-(s)*Pns

M2<-(s^2)*Pns

# Calculate lacunarity

L<-(sum(M2))/((sum(M1))^2)

}

# Apply the lacunarity function to the values of m 

lac<-mapply(lacunarity,m)

# Plot of the results

plot(log(m),log(lac), xlab="log(m)", ylab="log(L(m))", main="Lacunarity Analysis")

# Salve in txt

tabela<-data.frame(m,lac)

write.table(tabela, "Lacunarity-Analysis-surf-teste1", row.names = FALSE)


# Calculation of the lacunarity exponent

fit <- lm(log(lac) ~ log(m))
abline(fit, col="red")

# Results
result = data.frame(abs(summary(fit)$coefficients[2, 1]),summary.fit$r.squared)
colnames(result) = c("Lacunarity Exponent", "R-squared")
print(result)
